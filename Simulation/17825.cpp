#include <iostream>
#include <vector>
#include <queue>

using namespace std;
//BOJ 주사위 윷놀이 https://www.acmicpc.net/problem/17825

//4개의 말을 움직이는 경우를 모두 탐색
//도착칸에 다른 말이 있지 않을 경우 모두 시뮬해본다.

//주사위는 최대 5칸까지 움직일 수 있고, 칸은 모두 33개이다.(시작, 도착칸 포함 )
int root[33][6] = {
    {0, 1, 2, 3, 4, 5},       //0번
    {2, 2, 3, 4, 5, 6},       //1번
    {4, 3, 4, 5, 6, 7},       //2번
    {6, 4, 5, 6, 7, 8},       //3번
    {8, 5, 6, 7, 8, 9},       //4번
    {10, 20, 21, 22, 28, 29}, //5번
    {12, 7, 8, 9, 10, 11},    //6번
    {14, 8, 9, 10, 11, 12},   //7번
    {16, 9, 10, 11, 12, 13},  //8번
    {18, 10, 11, 12, 13, 14}, //9번
    {20, 23, 24, 28, 29, 30}, //10번
    {22, 12, 13, 14, 15, 16}, //11번
    {24, 13, 14, 15, 16, 17}, //12번
    {26, 14, 15, 16, 17, 18}, //13번
    {28, 15, 16, 17, 18, 19}, //14번
    {30, 25, 26, 27, 28, 29}, //15번
    {32, 17, 18, 19, 31, 32}, //16번
    {34, 18, 19, 31, 32, 32}, //17번
    {36, 19, 31, 32, 32, 32}, //18번
    {38, 31, 32, 32, 32, 32}, //19번
    {13, 21, 22, 28, 29, 30}, //20번
    {16, 22, 28, 29, 30, 31}, //21번
    {19, 28, 29, 30, 31, 32}, //22번
    {22, 24, 28, 29, 30, 31}, //23번
    {24, 28, 29, 30, 31, 32}, //24번
    {28, 26, 27, 28, 29, 30}, //25번
    {27, 27, 28, 29, 30, 31}, //26번
    {26, 28, 29, 30, 31, 32}, //27번
    {25, 29, 30, 31, 32, 32}, //28번
    {30, 30, 31, 32, 32, 32}, //29번
    {35, 31, 32, 32, 32, 32}, //30번
    {40, 32, 32, 32, 32, 32}, //31번
    {0, 32, 32, 32, 32, 32}   //32번
};
int score[11];
int horse[4];
int ans = 0;
int moveH[11];

typedef pair<int, int> pp;

int calc()
{
    //판마다 움직일 말들이 정해졌으므로 움직인다.
    //단, 도착하는 칸에 다른 말이 있으면 이 말은 움직이지 않는다. -> -1을 출력하고 다음 조합을 사용한다.
    int ret = 0;

    horse[0] = horse[1] = horse[2] = horse[3] = 0; //시작 칸에 4개의 말이 있다.
    for (int i = 0; i < 10; i++)
    {
        int now = moveH[i];
        int pos = horse[now];
        int dice = score[i];
        int next = root[pos][dice];
        if (next != 32) {
        bool flag = false;
        for (int j = 0; j < 4; j++)
        {
            if (j == now)
                continue;
            if (horse[j] == next)
            {
                flag = true;
                break;
            }
        }
        if (flag)
            return -1;
        }
        //해당 위치로 이동
        ret += root[next][0];
        horse[now] = next;
    }

    return ret;
}
void dfs(int cnt)
{
    if (cnt == 10)
    {
        //경기 끝
        ans = max(ans, calc());
        return;
    }

    for (int i = 0; i < 4; i++)
    {

        //이번 판에 움직일 말들을 조합을 이용해서 배치한다.
        moveH[cnt] = i;
        dfs(cnt + 1);
    }
}
int main()
{

    ios_base::sync_with_stdio(0);
    cin.tie(0);

    for (int i = 0; i < 10; i++)
    {
        cin >> score[i];
    }

    dfs(0);
    cout << ans << '\n';
    return 0;
}